// source: tests/proto/primitive.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protoc_gen_es6.tests.proto.PrimitiveTest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protoc_gen_es6.tests.proto.PrimitiveTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protoc_gen_es6.tests.proto.PrimitiveTest.displayName = 'proto.protoc_gen_es6.tests.proto.PrimitiveTest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.toObject = function(opt_includeInstance) {
  return proto.protoc_gen_es6.tests.proto.PrimitiveTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protoc_gen_es6.tests.proto.PrimitiveTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    doubleField: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    floatField: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    int32Field: jspb.Message.getFieldWithDefault(msg, 3, 0),
    int64Field: jspb.Message.getFieldWithDefault(msg, 4, 0),
    uint32Field: jspb.Message.getFieldWithDefault(msg, 5, 0),
    uint64Field: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sint32Field: jspb.Message.getFieldWithDefault(msg, 7, 0),
    sint64Field: jspb.Message.getFieldWithDefault(msg, 8, 0),
    fixed32Field: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fixed64Field: jspb.Message.getFieldWithDefault(msg, 10, 0),
    sfixed32Field: jspb.Message.getFieldWithDefault(msg, 11, 0),
    sfixed64Field: jspb.Message.getFieldWithDefault(msg, 12, 0),
    boolField: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    stringField: jspb.Message.getFieldWithDefault(msg, 14, ""),
    bytesField: msg.getBytesField_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protoc_gen_es6.tests.proto.PrimitiveTest}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protoc_gen_es6.tests.proto.PrimitiveTest;
  return proto.protoc_gen_es6.tests.proto.PrimitiveTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protoc_gen_es6.tests.proto.PrimitiveTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protoc_gen_es6.tests.proto.PrimitiveTest}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleField(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatField(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt32Field(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInt64Field(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUint32Field(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64Field(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSint32Field(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSint64Field(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFixed32Field(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setFixed64Field(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readSfixed32());
      msg.setSfixed32Field(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSfixed64Field(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolField(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringField(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protoc_gen_es6.tests.proto.PrimitiveTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protoc_gen_es6.tests.proto.PrimitiveTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDoubleField();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFloatField();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getInt32Field();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInt64Field();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUint32Field();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getUint64Field();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSint32Field();
  if (f !== 0) {
    writer.writeSint32(
      7,
      f
    );
  }
  f = message.getSint64Field();
  if (f !== 0) {
    writer.writeSint64(
      8,
      f
    );
  }
  f = message.getFixed32Field();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getFixed64Field();
  if (f !== 0) {
    writer.writeFixed64(
      10,
      f
    );
  }
  f = message.getSfixed32Field();
  if (f !== 0) {
    writer.writeSfixed32(
      11,
      f
    );
  }
  f = message.getSfixed64Field();
  if (f !== 0) {
    writer.writeSfixed64(
      12,
      f
    );
  }
  f = message.getBoolField();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getStringField();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getBytesField_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional double double_field = 1;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getDoubleField = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setDoubleField = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float float_field = 2;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getFloatField = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setFloatField = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int32 int32_field = 3;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getInt32Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setInt32Field = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 int64_field = 4;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getInt64Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setInt64Field = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 uint32_field = 5;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getUint32Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setUint32Field = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 uint64_field = 6;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getUint64Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setUint64Field = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional sint32 sint32_field = 7;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getSint32Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setSint32Field = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional sint64 sint64_field = 8;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getSint64Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setSint64Field = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 fixed32_field = 9;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getFixed32Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setFixed32Field = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional fixed64 fixed64_field = 10;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getFixed64Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setFixed64Field = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sfixed32 sfixed32_field = 11;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getSfixed32Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setSfixed32Field = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sfixed64 sfixed64_field = 12;
 * @return {number}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getSfixed64Field = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setSfixed64Field = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bool bool_field = 13;
 * @return {boolean}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getBoolField = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setBoolField = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string string_field = 14;
 * @return {string}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getStringField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setStringField = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes bytes_field = 15;
 * @return {!(string|Uint8Array)}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getBytesField = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes bytes_field = 15;
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {string}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getBytesField_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesField()));
};


/**
 * optional bytes bytes_field = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesField()`
 * @return {!Uint8Array}
 */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.getBytesField_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesField()));
};


/** @param {!(string|Uint8Array)} value */
proto.protoc_gen_es6.tests.proto.PrimitiveTest.prototype.setBytesField = function(value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};


goog.object.extend(exports, proto.protoc_gen_es6.tests.proto);
